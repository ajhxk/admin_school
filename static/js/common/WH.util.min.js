(function(window, root, type){

    if(!window[root]){
        window[root] = {};
    }
    if(!window[root][type]){
        window[root][type] = {};
    }

    var winRootType = window[root][type];

    /**
     * 创建html字符串
     * @param tag
     * @param html
     * @param attrs
     * @returns {string}
     * @private
     */
    function buildHtmlStr_(tag, html, attrs){

        if (typeof (html) != 'string') {
            attrs = html;
            html = null;
        }
        var h = '<' + tag;
        for (attr in attrs) {
            if (attrs[attr] === false) continue;
            h += ' ' + attr + '="' + attrs[attr] + '"';
        }
        return h += html ? ">" + html + "</" + tag + ">" : "/>";
    }
    winRootType['buildHtmlStr'] = buildHtmlStr_ ;


    /**
     * 判断类型
     * 获取包含类型判断方法对象
     * @param typeArray
     * @returns {{}}
     * @private(util)
     */
    function returnType_(typeArray){
        var Type = {},
            typeArray = typeArray;

        for(var i= 0,type; type = typeArray[i++];){

            (function(type){
                Type['is'+type] = function(obj){
                    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
                }
            })(type);
        }
        return Type;
    }

    (function(typeArray){

        var type_ = returnType_(typeArray);
        winRootType['type'] = type_;

    })(['String', 'Array', 'Number', 'Date']);

    /**
     * 切换display属性
     * @param nodeObj
     * @param value
     * @returns {boolean}
     * @private
     */
    function toggleDisplay_(nodeObj, value){
        if(nodeObj.style.display != 'none'){
            nodeObj.style.display = 'none';
        }else {
            nodeObj.style.display = value || '';
        }
        return true;
    }
    winRootType['toggleDisplay'] = toggleDisplay_;

    /**
     * 更换函数this指向
     * @param obj
     * @param func
     * @returns {Function}
     * @private
     */
    function bindFunction_(obj, func){
        return function(){
            func.apply(obj, arguments);
        };
    };
    winRootType['bindFunction'] = bindFunction_ ;

    /**
     * 获取窗口尺寸
     * @returns {{width: (Number|Element|number), height: (Number|Element|number)}}
     * @private
     */
    function getBrowserWindowSize_(){
        var de = document.documentElement;

        return {
            'width':(
            window.innerWidth
            || (de && de.clientWidth )
            || document.body.clientWidth),
            'height':(
            window.innerHeight
            || (de && de.clientHeight )
            || document.body.clientHeight)
        }
    }
    winRootType['getBrowserWindowSize'] = getBrowserWindowSize_;

    /**
     * 节点类型
     * @type {{}}
     */
    winRootType['node'] = {
        ELEMENT_NODE                : 1,
        ATTRIBUTE_NODE              : 2,
        TEXT_NODE                   : 3,
        CDATA_SECTION_NODE          : 4,
        ENTITY_REFERENCE_NODE       : 5,
        ENTITY_NODE                 : 6,
        PROCESSING_INSTRUCTION_NODE : 7,
        COMMENT_NODE                : 8,
        DOCUMENT_NODE               : 9,
        DOCUMENT_TYPE_NODE          : 10,
        DOCUMENT_FRAGMENT_NODE      : 11,
        NOTATION_NODE               : 12
    };

    /**
     * 获取事件对象
     * @param W3CEvent
     * @returns {*|Event}
     * @private
     */
    function getEventObject_(W3CEvent) {
        return W3CEvent || window.event;
    }
    winRootType['getEventObject'] = getEventObject_;

    /**
     * 取消事件冒泡
     * @param eventObject
     * @private
     */
    function stopPropagation_(eventObject) {
        eventObject = eventObject || getEventObject_(eventObject);
        if(eventObject.stopPropagation) {
            eventObject.stopPropagation();
        } else {
            eventObject.cancelBubble = true;
        }
    }
    winRootType['stopPropagation'] = stopPropagation_;

    /**
     * 阻止默认事件
     * @param eventObject
     */
    function preventDefault_(eventObject) {
        eventObject = eventObject || getEventObject_(eventObject);
        if(eventObject.preventDefault) {
            eventObject.preventDefault();
        } else {
            eventObject.returnValue = false;
        }
    }
    winRootType['preventDefault'] = preventDefault_;

    /**
     * 获取事件触发元素
     * @param eventObject
     * @returns {EventTarget|*}
     * @private
     */
    function getTarget_(eventObject) {
        eventObject = eventObject || getEventObject_(eventObject);
        // Check if the target is W3C or MSIE
        var target = eventObject.target || eventObject.scrElement;
        // Reassign the target to the parent
        // if it is a text node like in Safari
        if(target.nodeType == winRootType.node.TEXT_NODE) {
            target = node.parentNode;
        }
        return target;

    }
    winRootType['getTarget'] = getTarget_ ;

    /**
     * 获取单列
     * @param fn
     * @returns {Function}
     * @private(util)
     */
    function getSingle_ (fn){
        var result;
        return function(){
            return result || ( result = fn.apply(this,arguments) );
        }
    };
    winRootType['getSingle'] = getSingle_;

    /**
     * 节流函数（interval毫秒内只执行一次）
     * @param fn
     * @param interval
     * @returns {Function}
     * @private
     */
    function throttle_(fn, interval){
        var _self = fn,
            timer = null,
            lock = false;


        return function (){
            var args = arguments,
                _me = this;

            //如果定时器还在，说明前一次延迟还没完成
            if(timer){
                return false;
            }
            if(!lock) {
                _self.apply(_me,args);
                lock = true;
            }

            timer = setTimeout(function(){
                //延迟一段时间执行
                clearTimeout(timer);
                timer = null;
                lock = false;
            },interval || 500);
        }
    }
    winRootType['throttle'] = throttle_;

    /**
     * 对Date的扩展，将 Date 转化为指定格式的String
     * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
     * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
     * 例子：
     * (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
     * (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
     * @param obj
     * @param fmt
     * @returns {*}
     * @private
     */
    function dateFormat_ (obj,fmt){ //author: meizz

        if( !WH.util.type.isDate(obj) ){
            alert('obj应该是日期对象！');
            return false;
        }
        var _self = obj;
        var o = {
            "M+": _self.getMonth() + 1,                 //月份
            "d+": _self.getDate(),                    //日
            "h+": _self.getHours(),                   //小时
            "m+": _self.getMinutes(),                 //分
            "s+": _self.getSeconds(),                 //秒
            "q+": Math.floor((_self.getMonth() + 3) / 3), //季度
            "S": _self.getMilliseconds()             //毫秒
        };

        if (/(y+)/.test(fmt)){
            fmt = fmt.replace(RegExp.$1, (_self.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o){
            if(new RegExp("(" + k + ")").test(fmt)){
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };
    winRootType['dateFormat'] = dateFormat_;


    function Widget_(){
        this.handlers = {};
    }
    Widget_.prototype = {

        constructor: Widget_,

        addHandler : function(type, handler){
            if (typeof  this.handlers[type] == "undefined"){
                this.handlers[type] = [];
            }
            this.handlers[type].push(handler);
        },

        fire : function(event){
            if(!event.target){
                event.target = this;
            }
            if(this.handlers[event.type] instanceof Array){
                var handlers = this.handlers[event.type];
                for(var i= 0,len=handlers.length;i<len;i++){
                    handlers[i](event);
                }
            }
        },

        removeHandler : function(type,handler){
            if(this.handlers[type] instanceof Array){
                var handlers = this.handlers[type];
                for(var i= 0,len=handlers.length;i<len;i++){
                    if(handlers[i] === handler){
                        break;
                    }
                }
                handlers.splice(i, 1);
            }
        }

    };
    function returnWidgetConstructor_(){
        return Widget_;
    }
    winRootType['returnWidget'] = returnWidgetConstructor_;


})(window, 'WH', 'util');